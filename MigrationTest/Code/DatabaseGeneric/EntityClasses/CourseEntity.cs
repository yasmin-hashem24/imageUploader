//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.10.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using MigrationTest.HelperClasses;
using MigrationTest.FactoryClasses;
using MigrationTest.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace MigrationTest.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Course'.<br/><br/></summary>
	[Serializable]
	public partial class CourseEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<StudentCourseEntity> _studentCourses;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static CourseEntityStaticMetaData _staticMetaData = new CourseEntityStaticMetaData();
		private static CourseRelations _relationsFactory = new CourseRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name StudentCourses</summary>
			public static readonly string StudentCourses = "StudentCourses";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CourseEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CourseEntityStaticMetaData()
			{
				SetEntityCoreInfo("CourseEntity", InheritanceHierarchyType.None, false, (int)MigrationTest.EntityType.CourseEntity, typeof(CourseEntity), typeof(CourseEntityFactory), false);
				AddNavigatorMetaData<CourseEntity, EntityCollection<StudentCourseEntity>>("StudentCourses", a => a._studentCourses, (a, b) => a._studentCourses = b, a => a.StudentCourses, () => new CourseRelations().StudentCourseEntityUsingCourseId, typeof(StudentCourseEntity), (int)MigrationTest.EntityType.StudentCourseEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static CourseEntity()
		{
		}

		/// <summary> CTor</summary>
		public CourseEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public CourseEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this CourseEntity</param>
		public CourseEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Course which data should be fetched into this Course object</param>
		public CourseEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Course which data should be fetched into this Course object</param>
		/// <param name="validator">The custom validator object for this CourseEntity</param>
		public CourseEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CourseEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'StudentCourse' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoStudentCourses() { return CreateRelationInfoForNavigator("StudentCourses"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this CourseEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CourseRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'StudentCourse' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathStudentCourses { get { return _staticMetaData.GetPrefetchPathElement("StudentCourses", CommonEntityBase.CreateEntityCollection<StudentCourseEntity>()); } }

		/// <summary>The Id property of the Entity Course<br/><br/></summary>
		/// <remarks>Mapped on  table field: "course"."Id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)CourseFieldIndex.Id, true); }
			set { SetValue((int)CourseFieldIndex.Id, value); }		}

		/// <summary>The Instructor property of the Entity Course<br/><br/></summary>
		/// <remarks>Mapped on  table field: "course"."instructor".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Instructor
		{
			get { return (System.String)GetValue((int)CourseFieldIndex.Instructor, true); }
			set	{ SetValue((int)CourseFieldIndex.Instructor, value); }
		}

		/// <summary>The Name property of the Entity Course<br/><br/></summary>
		/// <remarks>Mapped on  table field: "course"."name".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Name
		{
			get { return (System.String)GetValue((int)CourseFieldIndex.Name, true); }
			set	{ SetValue((int)CourseFieldIndex.Name, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'StudentCourseEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(StudentCourseEntity))]
		public virtual EntityCollection<StudentCourseEntity> StudentCourses { get { return GetOrCreateEntityCollection<StudentCourseEntity, StudentCourseEntityFactory>("Course", true, false, ref _studentCourses); } }

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace MigrationTest
{
	public enum CourseFieldIndex
	{
		///<summary>Id. </summary>
		Id,
		///<summary>Instructor. </summary>
		Instructor,
		///<summary>Name. </summary>
		Name,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace MigrationTest.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Course. </summary>
	public partial class CourseRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between CourseEntity and StudentCourseEntity over the 1:n relation they have, using the relation between the fields: Course.Id - StudentCourse.CourseId</summary>
		public virtual IEntityRelation StudentCourseEntityUsingCourseId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "StudentCourses", true, new[] { CourseFields.Id, StudentCourseFields.CourseId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCourseRelations
	{
		internal static readonly IEntityRelation StudentCourseEntityUsingCourseIdStatic = new CourseRelations().StudentCourseEntityUsingCourseId;

		/// <summary>CTor</summary>
		static StaticCourseRelations() { }
	}
}
